#!groovy

// Global vars so they can be used in different steps
TestDocs = true
TestFunctional = true

pipeline {

    options {
        timestamps()
        parallelsAlwaysFailFast()
        // Note(jhesketh): Unfortunately we can't set a global timeout for the
        //                 pipeline as it would also apply to the post stages
        //                 and hence interrupt our cleanup.
    }

    agent {
        node {
            label "cloud-ccp-ci"
        }
    }

    parameters {
        /* first value in the list is the default */
        choice(choices: ['airship', 'osh'], description: 'Which deployment mechanism?', name: 'deployment')
        choice(choices: ['caasp3', 'caasp4'], description: 'Which caasp version to use?', name: 'caasp_version')
        booleanParam(name: 'run_tempest', defaultValue: false, description: 'Run tempest tests?')
        choice(choices: ['smoke', 'all'], description: 'Run smoke or all tempest tests?', name: 'tempest_test_type')
        choice(choices: ['ses_aio', 'ses_rook'], description: 'Which ses version to use?', name: 'ses_version')
    }

    environment {
        BRANCH_NAME_ONLY="${env.GIT_BRANCH.replaceAll("origin/", "").toLowerCase()}"
        /* Sanitize ENVNAME (lowercase and remove some problematic characters)
           as the names of the heat stacks will be derived from this. Also
           the CaaSP Velum automation has issues with mixed case hostnames. */
        SOCOK8S_ENVNAME = "cloud-socok8s-${BRANCH_NAME_ONLY.replaceAll("[^a-zA-Z0-9-]+", "-").toLowerCase()}-${env.BUILD_NUMBER}"
        SOCOK8S_OPENSUSE_MIRROR="https://provo-mirror.opensuse.org"
        OS_CLOUD = "engcloud-socok8s-ci"
        SOCOK8S_TEST_CEPH_ROOK="true"
        KEYNAME = "engcloud-cloud-ci"
        DELETE_ANYWAY = "YES"
        DEPLOYMENT_MECHANISM = "openstack"
        ANSIBLE_VERBOSITY = 1
        ANSIBLE_STDOUT_CALLBACK = "yaml"
        USER = "jenkins" /* Why isn't this set in the jenkins environment? */
        USE_ARA = "True"
        ARA_DIR = "$WORKSPACE"
    }

    stages {
        stage('Show environment information') {
            steps {
                sh 'printenv'
            }
        }
        stage('Set ssh-agent for caasp4 deployment') {
            when { expression { return  TestFunctional } }
            steps {
                sh "files/setup-ssh-agent-for-caasp4-ci.py ${env.SOCOK8S_ENVNAME}"
            }
        }
        stage('Check for updated files') {
            when { expression { env.BRANCH_NAME_ONLY != 'master' } }
            steps {
                script {
                    /* When doing PRs, make sure we don't test everything by default */
                    TestDocs = false
                    TestFunctional = false

                    /* Need to fetch master to check against it for the proper diff */
                    sh "git config --add remote.origin.fetch +refs/heads/master:refs/remotes/origin/master"
                    sh "git fetch --no-tags"
                    List<String> sourceChanged = sh(returnStdout: true, script: "git diff --name-only origin/master...origin/${env.BRANCH_NAME_ONLY}").split()
                    echo "Files changed for this PR:\n${sourceChanged.join('\n')}"
                    TestDocs = sourceChanged.any{it.contains("doc/")} or sourceChanged.any{it.contains("tox.ini")} or sourceChanged.any{it.contains("Jenkinsfile.integration")}
                    /* In the future we could add a conditional to auto TestFunctional if tox.ini or Jenkinsfile is changed */
                    /* when conditionals will be harder to grasp or different code paths */
                    TestFunctional = !sourceChanged.every{it.contains("doc/")}
                }
            }
        }

        stage('lint and docs') {
            parallel {
                stage('Lint Ansible playbooks') {
                    when { expression { return  TestFunctional } }
                    options {
                        timeout(time: 5, unit: 'MINUTES', activity: true)
                    }
                    steps {
                        sh "tox -e lint"
                    }
                }

                stage('Build docs') {
                    when { expression { return TestDocs } }
                    options {
                        timeout(time: 5, unit: 'MINUTES', activity: true)
                    }
                    steps {
                        sh "tox -e docs"
                    }
                    post {
                        success {
                            publishHTML target: [
                                allowMissing: false,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: 'doc/build/html',
                                reportFiles: 'index.html',
                                reportName: 'Built Docs'
                            ]
                        }
                    }
                }
            }
        }
        stage('Clean tox dir') {
            when {
                anyOf {
                    expression { return  TestFunctional }
                    expression { return TestDocs }
                }
            }
            steps {
                sh "rm -Rf .tox"
            }
        }
        stage('Create network') {
            when { expression { return  TestFunctional } }
            options {
                timeout(time: 10, unit: 'MINUTES', activity: true)
            }
            steps {
                sh 'touch /tmp/${SOCOK8S_ENVNAME}.needcleanup'
                sh "./run.sh deploy_network"
            }
        }
        stage('Create VMs') {
            when { expression { return  TestFunctional } }
            options {
                timeout(time: 45, unit: 'MINUTES', activity: true)
            }
            parallel {
                stage('Deploy CaaSP3') {
                    when { expression  { params.caasp_version == "caasp3" } }
                    steps {
                        sh "./run.sh deploy_caasp"
                    }
                }
                stage('Deploy CaaSP4') {
                    when { expression  { params.caasp_version == "caasp4" } }
                    steps {
                        sh "source ${WORKSPACE}/sock_${env.SOCOK8S_ENVNAME} && ./run.sh deploy_caasp4"
                    }
                }
                stage('Deploy SES') {
                    when { expression  { params.ses_version == "ses_aio" } }
                    steps {
                        sh "./run.sh deploy_ses"
                    }
                }
                stage('Deploy CCP Deployer') {
                    steps {
                        sh "./run.sh deploy_ccp_deployer"
                        sh "./run.sh configure_ccp_deployer"
                    }
                }
            }
        }

        stage('Enroll CaaSP workers') {
            when {
                allOf {
                    expression { return  TestFunctional }
                    expression { params.caasp_version == "caasp3" }
                }
            }
            options {
                timeout(time: 10, unit: 'MINUTES', activity: true)
            }
            steps {
                sh "./run.sh enroll_caasp_workers"
            }
        }

        stage('Setup CaaSP workers for openstack') {
            when { expression { return  TestFunctional } }
            options {
                timeout(time: 10, unit: 'MINUTES', activity: true)
            }
            steps {
                sh "source ${WORKSPACE}/sock_${env.SOCOK8S_ENVNAME} && ./run.sh setup_caasp_workers_for_openstack"
            }
        }

        stage('Deploy SES on Kubernetes with rook') {
            when { expression  { params.ses_version == "ses_rook" } }
            steps {
                sh "./run.sh deploy_ses_rook"
            }
        }

        stage('Deploy OpenStack Helm') {
            options {
                timeout(time: 20, unit: 'MINUTES', activity: true)
            }
            when {
                allOf {
                    expression { params.deployment == "osh" }
                    expression { return  TestFunctional }
                }
            }
            steps {
                sh "./run.sh patch_upstream"
                sh "./run.sh build_images"
                sh "./run.sh deploy_osh"
            }
        }

        stage('Deploy Airship') {
            options {
                timeout(time: 45, unit: 'MINUTES', activity: true)
            }
            when {
                allOf {
                    expression { params.deployment == "airship" }
                    expression { return  TestFunctional }
                }
            }
            steps {
                sh "source ${WORKSPACE}/sock_${env.SOCOK8S_ENVNAME} && ./run.sh setup_airship"
            }
        }

        stage('Run Tempest') {
            options {
                timeout(time: 240, unit: 'MINUTES', activity: true)
            }
            when {
                allOf {
                    expression { env.run_tempest == 'true' }
                    expression { params.deployment == 'airship' }
                    expression { return  TestFunctional }
                }
            }
            steps {
                sh """
                  export TEMPEST_TEST_TYPE=${env.tempest_test_type}
                  export AIRSHIP_TEMPEST_LOG_STDOUT=True
                  ./run.sh test
                """
            }
        }
    }

    post {
        always {
            script {
                sh 'ara generate html ara_report'
            }
            publishHTML target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'ara_report',
                        reportFiles: 'index.html',
                        reportName: 'ARA Report'
            ]
        }
        failure {
            script {
                if (env.hold_instance_for_debug == 'true') {
                    echo "You can reach this node by connecting to its floating IP as root user, with the default password of your image."
                    timeout(time: 3, unit: 'HOURS') {
                        input(message: "Waiting for input before deleting  env ${SOCOK8S_ENVNAME}.")
                    }
                }
            }
            script {
                sh "source ${WORKSPACE}/sock_${env.SOCOK8S_ENVNAME} && ./run.sh gather_logs"
            }
            zip archive: true, dir: 'logs/', zipFile: 'logs.zip'
            archiveArtifacts artifacts: 'logs.zip'
        }
        cleanup {
            script {
                // Do not leave the ssh-agent running
                sh "pkill -f 'ssh-agent -a /tmp/${env.SOCOK8S_ENVNAME}'"
                if (fileExists("/tmp/${env.SOCOK8S_ENVNAME}.needcleanup")) {
                    sh './run.sh teardown'
                    sh 'rm /tmp/${SOCOK8S_ENVNAME}.needcleanup'
                }
            }
        }
    }
}
